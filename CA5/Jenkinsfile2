pipeline {
    agent any

    environment {
        GRADLE_HOME = "${env.WORKSPACE}/CA2/Part2/react-and-spring-data-rest-basic"
    }

    options {
        skipDefaultCheckout() // Skip default checkout to manually configure git step
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out...'
                git url: 'https://github.com/NathaliaTGodoy/devops-23-24-PSM-1231864.git'
            }
        }

        stage('Assemble') {
            steps {
                echo 'Assembling...'
                dir("${GRADLE_HOME}") {
                    sh 'chmod +x gradlew'
                    sh './gradlew assemble'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
                dir("${GRADLE_HOME}") {
                    sh './gradlew test'
                    junit 'build/test-results/test/*.xml'
                }
            }
        }

        stage('Javadoc') {
            steps {
                echo 'Generating Javadoc...'
                dir("${GRADLE_HOME}") {
                    sh './gradlew javadoc'
                }
            }
            post {
                success {
                    publishHTML(target: [
                        reportName: 'Javadoc',
                        reportDir: 'build/docs/javadoc',
                        reportFiles: 'index.html',
                        keepAll: true,
                        alwaysLinkToLastBuild: true,
                        allowMissing: false
                    ])
                }
            }
        }

        stage('Archive') {
                steps {
                    echo 'Archiving...'
                    dir("${GRADLE_HOME}") {
                        archiveArtifacts artifacts: 'build/libs/*.jar', allowEmptyArchive: true
                    }
                }
            }

        stage('Docker Image') {
                        steps {
                            script {
                                dir("${GRADLE_HOME}") {
                                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]) {
                                        def customImage = docker.build("nathaliatgodoy/devops:ca5")
                                        docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                                            customImage.push()

                                            //docker.build("my-image:${env.BUILD_ID}")
                            }
                        }
                    }
                }
            }
    }
}
    post {
        always {
            cleanWs()
        }
    }
}
